.filter_master:
  &filter_master # Hidden yaml configuration that defines an anchor named 'job_configuration'
  filters:
    branches:
      only:
        - master
version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1

executors:
  node:
    docker:
      - image: cimg/node:13.8.0
commands:
  slack_notification:
    description: "A slack notification"
    steps:
      - slack/notify:
          custom: |
            {
              "attachments": [
                {
                  "color": "#d50054",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your CI pipeline is FAILED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build pipeline number *${CIRCLE_BUILD_NUM}* is failed. Job is ${CIRCLE_JOB}, please check link here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }
          event: fail

      - slack/notify:
          event: pass
          custom: |
            {
              "attachments": [
                {
                  "color": "#00d581",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your CI pipeline is PASSED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build pipeline number *${CIRCLE_BUILD_NUM}* is PASSED, check link here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }
  setup_aws:
    description: setup aws
    steps:
      - aws/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
  destroy_infra_fe:
    description: using for rollback creating fe infra
    parameters:
      id:
        type: string
    steps:
      - run:
          name: delete all aws s3 files
          command: aws s3 rm s3://udapeople-<< parameters.id >> --recursive
          when: on_fail
      - run:
          name: delete frontend stack
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: on_fail
  destroy_infra_be:
    description: using for rollback creating be infra
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: destroy stack <<parameters.stack_name>>
          command: aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"
          when: on_fail
  revert_migration_when_failed:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      force_revert:
        type: boolean
        default: false
    steps:
      - run:
          name: Revert migrations
          command: chmod +x backend/runRevertMigration.sh && backend/runRevertMigration.sh << parameters.force_revert >>
          when: on_fail

jobs:
  build_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/package-lock.json
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - slack_notification
  build_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/package-lock.json
          key: be-caches-{{ checksum "backend/package.json" }}
      - slack_notification

  test_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd frontend
            npm run test
  test_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd backend
            npm run test

  scan_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
  scan_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit --audit-level=critical

  # CD section
  deploy_infra_be:
    executor: aws/default
    working_directory: ~/project
    steps:
      - checkout
      - setup_aws
      - run:
          name: ensure infrastructure backend
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople
      # AWS auto rollback when failed
      - destroy_infra_be:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: create inventory
          command: |
            chmod +x .circleci/bash/getIpAddress.sh
            echo [web] > .circleci/ansible/inventory.txt
            .circleci/bash/getIpAddress.sh "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - save_cache:
          paths:
            - .circleci/ansible/inventory.txt
          key: inventory-{{ .Revision  }}

  deploy_infra_fe:
    executor: aws/default
    working_directory: ~/project
    steps:
      - checkout
      - setup_aws
      - run:
          name: ensure infrastructure frontend
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople
      - destroy_infra_be:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure_infrastructure:
    executor: python/default
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 7b:ca:8b:80:da:31:3b:d2:81:70:ff:eb:66:17:70:1d
      - restore_cache:
          key: inventory-{{ .Revision  }}
      - run:
          name: install ansible
          command: pip install --user ansible
      - run:
          name: configure with ansible
          command: ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
  configure_node_exporter:
    executor: python/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 7b:ca:8b:80:da:31:3b:d2:81:70:ff:eb:66:17:70:1d
      - restore_cache:
          key: inventory-{{ .Revision  }}
      - run:
          name: install ansible
          command: pip install --user ansible
      - run:
          name: install exporter
          command: ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/install-exporter.yml

  run-migration:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: Run migration
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: send migration status to kvdb
          command: chmod +x .circleci/bash/sendMigrationResult.sh && .circleci/bash/sendMigrationResult.sh
      - revert_migration_when_failed

  deploy_frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install and setup awscli
          command: chmod +x .circleci/bash/installAndSetupAws.sh && .circleci/bash/installAndSetupAws.sh
      - restore_cache:
          name: restore node_modules
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - restore_cache:
          name: restore inventory file
          keys:
            - inventory-{{ .Revision  }}
            - inventory-
      - run:
          name: export env
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Build frontend and deploy s3
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy_backend:
    executor: python/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 7b:ca:8b:80:da:31:3b:d2:81:70:ff:eb:66:17:70:1d
      - restore_cache:
          name: restore inventory
          keys:
            - inventory-{{ .Revision  }}
            - inventory-
      - restore_cache:
          name: restore node_modules
          keys:
            - be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: install ansible
          command: pip install --user ansible
      - run:
          name: create artifact
          command: tar -C backend -czvf .circleci/ansible/roles/deploy/artifact/artifact.tar.gz .
      - run:
          name: Start backend with ansible
          command: ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

  smoke_test:
    executor: node
    steps:
      - checkout
      - run:
          name: install and setup aws
          command: chmod +x .circleci/bash/installAndSetupAws.sh && .circleci/bash/installAndSetupAws.sh
      - restore_cache:
          name: restore inventory
          keys:
            - inventory-{{ .Revision  }}
            - inventory-
      - restore_cache:
          name: restore node_modules
          keys:
            - be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: BE smoke test
          command: chmod +x .circleci/bash/beSmokeTest.sh && .circleci/bash/beSmokeTest.sh
      - run:
          name: FE smoke test
          command: chmod +x .circleci/bash/feSmokeTest.sh && .circleci/bash/feSmokeTest.sh $CIRCLE_WORKFLOW_ID
      - revert_migration_when_failed:
          force_revert: true
      - destroy_infra_be:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_infra_fe:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront_update:
    executor: aws/default
    steps:
      - checkout
      - setup_aws
      - run:
          name: Switch cloudfront to new frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
  cleanup:
    executor: aws/default
    steps:
      - checkout
      - setup_aws
      - run:
          name: Clean up previous stack
          command: chmod +x .circleci/bash/deletePreviousStack.sh && .circleci/bash/deletePreviousStack.sh
workflows:
  ci-cd-pipeline:
    jobs:
      - build_frontend:
          context: global
      - build_backend:
          context: global

      - test_frontend:
          requires:
            - build_frontend

      - test_backend:
          requires:
            - build_backend

      - scan_frontend:
          requires:
            - build_frontend

      - scan_backend:
          requires:
            - build_backend
      # CD pipeline
      - ready_for_deploy:
          type: approval
          <<: *filter_master
          requires:
            - test_frontend
            - test_backend
            - scan_frontend
            - scan_backend

      - deploy_infra_be:
          <<: *filter_master
          requires:
            - ready_for_deploy

      - deploy_infra_fe:
          <<: *filter_master
          requires:
            - ready_for_deploy

      - configure_infrastructure:
          <<: *filter_master
          requires:
            - deploy_infra_be

      - configure_node_exporter:
          <<: *filter_master
          requires:
            - deploy_infra_be

      - run-migration:
          <<: *filter_master
          requires:
            - ready_for_deploy
      - deploy_frontend:
          <<: *filter_master
          requires:
            - deploy_infra_fe

      - deploy_backend:
          <<: *filter_master
          requires:
            - configure_infrastructure

      - smoke_test:
          <<: *filter_master
          requires:
            - deploy_frontend
            - deploy_backend

      - cloudfront_update:
          <<: *filter_master
          requires:
            - smoke_test
      - cleanup:
          <<: *filter_master
          requires:
            - smoke_test
