
version: 2.1
orbs:
  slack: circleci/slack@4.12.1
executors:
  node:
    docker:
      - image: cimg/node:14.21
commands:
  slack_notification:
    description: "A slack notification"
    steps:
      - slack/notify:
          custom: |
            {
              "attachments": [
                {
                  "color": "#d50054",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your CI pipeline is FAILED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build pipeline number *${CIRCLE_BUILD_NUM}* is failed. Job is ${CIRCLE_JOB}, please check link here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }
          event: fail

      - slack/notify:
          event: pass
          custom: |
            {
              "attachments": [
                {
                  "color": "#00d581",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your CI pipeline is PASSED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build pipeline number *${CIRCLE_BUILD_NUM}* is PASSED, check link here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }

jobs:
  build_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/package-lock.json
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - slack_notification
      
  build_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/package-lock.json
          key: be-caches-{{ checksum "backend/package.json" }}
      - slack_notification

  test_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd frontend
            npm run test
  test_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: be-caches-{{ checksum "backend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd backend
            npm run test

  scan_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caches-{{ checksum "frontend/package.json" }}
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
  scan_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caches-{{ checksum "backend/package.json" }}
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit --audit-level=critical
workflows:
  ci-pipeline:
    jobs:
      - build_frontend:
          context: global

      - build_backend:
          context: global

      - test_frontend:
          requires:
            - build_frontend

      - test_backend:
          requires:
            - build_backend

      - scan_frontend:
          requires:
            - build_frontend

      - scan_backend:
          requires:
            - build_backend

