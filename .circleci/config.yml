version: 2.1
executors:
  node:
    docker:
      - image: node:14-alpine
jobs:
  build_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/package-lock.json
          key: fe-caching-{{ checksum "frontend/package.json" }}
  build_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Compile code check
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/package-lock.json
          key: be-caching-{{ checksum "backend/package.json" }}

  test_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caching-{{ checksum "frontend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd frontend
            npm run test
  test_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: be-caching-{{ checksum "backend/package.json" }}
      - run:
          name: Unit testing
          command: |
            cd backend
            npm run test

  scan_frontend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caching-{{ checksum "frontend/package.json" }}
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
  scan_backend:
    executor: node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: fe-caching-{{ checksum "backend/package.json" }}
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit --audit-level=critical
workflows:
  ci-pipeline:
    jobs:
      - build_frontend
      - build_backend

      - test_frontend:
          requires:
            - build_frontend
      - test_backend:
          requires:
            - build_backend

      - scan_frontend:
          requires:
            - build_frontend
      - scan_backend:
          requires:
            - build_backend
